# Listes
liste_1 = [1, 4, 2, 7, 35, 84]
villes = ['Paris', 'Berlin', 'Londres', 'Bruxelles']
nested_list = [liste_1, villes] # une liste peut meme contenir des listes ! On appelle cela une nested list

#Tuples
tuple_1 = (1, 2, 6, 2)

print(villes)

# INDEXING

print('séquence complete:', villes)
print('index 0:', villes[0])
print('index 1:', villes[1])
print('dernier index (-1):', villes[-1])

# SLICING [début (inclus) : fin (exclus) : pas]

print('séquence complete:', villes)
print('index 0-2:', villes[0:3])
print('index 1-2:', villes[1:3])
print('ordre inverse:', villes[::-1])

villes = ['Paris', 'Berlin', 'Londres', 'Bruxelles'] # liste initiale
print(villes)

villes.append('Dublin') # Rajoute un élément a la fin de la liste
print(villes)

villes.insert(2, 'Madrid') # Rajoute un élément a l'index indiqué
print(villes)

villes.extend(['Amsterdam', 'Rome']) # Rajoute une liste a la fin de notre liste
print(villes)

print('longeur de la liste:', len(villes)) #affiche la longueur de la liste

villes.sort(reverse=False) # trie la liste par ordre alphabétique / numérique
print(villes)

print(villes.count('Paris')) # compte le nombre de fois qu'un élément apparait dans la liste

if 'Paris' in villes:
  print('oui')
else:
  print('non')

for element in villes:
  print(element)

for index, element in enumerate(villes):
  print(index, element)

liste_2 = [312, 52, 654, 23, 65, 12, 678]
for element_1, element_2 in zip(villes, liste_2):
  print(element_1, element_2)

# Exercice :
def fibonacci(n):
    a = 0
    b = 1
    while b < n:
      a, b = b, a+b
      print(a)


# SOLUTION :

def fibonacci(n):
    a = 0
    b = 1
    fib = [a] # Création d'une liste fib 
    while b < n:
        a, b = b, a+b
        fib.append(a) # ajoute la nouvelle valeur de a a la fin de fib
    return fib

print(fibonacci(1000))


