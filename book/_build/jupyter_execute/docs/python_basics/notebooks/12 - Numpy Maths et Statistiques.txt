import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6]])

print(A.sum()) # effectue la somme de tous les éléments du tableau
print(A.sum(axis=0)) # effectue la somme des colonnes (somme sur éléments des les lignes)
print(A.sum(axis=1)) # effectue la somme des lignes (somme sur les éléments des colonnes)
print(A.cumsum(axis=0)) # effectue la somme cumulée
 
print(A.prod()) # effectue le produit
print(A.cumprod()) # effectue le produit cumulé
 
print(A.min()) # trouve le minimum du tableau
print(A.max()) # trouve le maximum du tableau
 
print(A.mean()) # calcule la moyenne
print(A.std()) # calcule l'ecart type,
print(A.var()) # calcule la variance

A = np.random.randint(0, 10, [5, 5]) # tableau aléatoire
print(A)

print(A.argsort()) # retourne les index pour trier chaque ligne du tableau 

print(A[:,0].argsort()) # retourne les index pour trier la colonne 0 de A

A = A[A[:,0].argsort(), :] # trie les colonnes du tableau selon la colonne 0.
A

B = np.random.randn(3, 3) # nombres aléatoires 3x3
 
# retourne la matrice de corrélation de B
print(np.corrcoef(B))

# retourne la matrice de corrélation entre les lignes 0 et 1 de B
print(np.corrcoef(B[:,0], B[:, 1]))

np.random.seed(0)
A = np.random.randint(0, 10, [5,5])
A

np.unique(A)

values, counts = np.unique(A, return_counts=True)

for i, j in zip(values[counts.argsort()], counts[counts.argsort()]):
    print(f'valeur {i} apparait {j}')

A = np.random.randn(5, 5)
A[0, 2] = np.nan # insere un NaN dans la matrice A
 
print('ratio NaN/zise:', (np.isnan(A).sum()/A.size)) # calcule la proportion de NaN dans A
 
print('moyenne sans NaN:', np.nanmean(A)) # calcule la moyenne de A en ignorant les NaN

A = np.ones((2,3))
B = np.ones((3,3))

print(A.T) # transposé de la matrice A (c'est un attribut de ndarray)

print(A.dot(B)) # produit matriciel A.B

A = np.random.randint(0, 10, [3, 3])
 
print('det=', np.linalg.det(A)) # calcule le determinant de A
print('inv A:\n', np.linalg.inv(A)) # calcul l'inverse de A

val, vec = np.linalg.eig(A)
print('valeur propre:\n', val) # valeur propre
print('vecteur propre:\n', vec) # vecteur propre

np.random.seed(0)
A = np.random.randint(0, 100, [10, 5])
A

# SOLUTION
D = (A - A.mean(axis=0)) / A.std(axis=0)
D

print(D.mean(axis=0)) # les moyennes sont toutes = 0
print(D.std(axis=0)) # les std sont tous = 1 


